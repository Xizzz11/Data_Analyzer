import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path
import customtkinter as ctk
import io
from PIL import Image, ImageTk
from datetime import datetime
import asyncio
import threading
import logging
from tkinter import filedialog
from typing import List, Tuple, Optional
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("minimal_log.txt", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

matplotlib.use('Agg')  # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–µ–∑ –æ–∫–Ω–∞

class DataAnalyzer:
    def __init__(self, file_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
        self.file_path = Path(file_path)
        self.df: Optional[pd.DataFrame] = None
        self.output_dir = Path('minimal_results') / datetime.now().strftime("%Y%m%d_%H%M%S")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω DataAnalyzer —Å —Ñ–∞–π–ª–æ–º: {file_path}")

    async def load_data_async(self, chunksize: int = 10000) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if not self.file_path.is_file():
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")
                return f"–§–∞–π–ª {self.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω! üî• –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ sample_data.csv."
            if self.file_path.suffix == '.csv':
                chunks = pd.read_csv(self.file_path, chunksize=chunksize, encoding='utf-8', low_memory=False)
                self.df = await asyncio.get_event_loop().run_in_executor(None, lambda: pd.concat(chunks, ignore_index=True))
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {self.df.shape}, —Å—Ç–æ–ª–±—Ü—ã: {list(self.df.columns)}")
                return f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –†–∞–∑–º–µ—Ä: {self.df.shape}\n–°—Ç–æ–ª–±—Ü—ã: {list(self.df.columns)} üöÄ"
            else:
                raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç CSV")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)} üíé"

    def basic_analysis(self) -> str:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö."""
        if self.df is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω logger.errorCullable
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! üî•"
        
        output = ["üíé –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:\n"]
        buffer = io.StringIO()
        self.df.info(buf=buffer)
        output.append(buffer.getvalue())  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: buffer.kleinenvalue() –Ω–∞ buffer.getvalue()
        output.append("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
        output.append(self.df.describe().to_string())
        output.append("\nüöÄ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n")
        output.append(self.df.isnull().sum().to_string())
        
        analysis_path = self.output_dir / 'minimal_analysis.txt'
        with open(analysis_path, 'w', encoding='utf-8') as f:
            f.write("\n".join(output))
        logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {analysis_path}")
        
        return "\n".join(output)

    def clean_data(self) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        if self.df is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! üî•"

        original_shape = self.df.shape
        for column in self.df.columns:
            if pd.api.types.is_numeric_dtype(self.df[column]):
                self.df[column] = self.df[column].fillna(self.df[column].median())
            else:
                mode_val = self.df[column].mode()
                self.df[column] = self.df[column].fillna(mode_val[0] if not mode_val.empty else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        numeric_cols = self.df.select_dtypes(include=[np.number]).columns
        for col in numeric_cols:
            Q1 = self.df[col].quantile(0.25)
            Q3 = self.df[col].quantile(0.75)
            IQR = Q3 - Q1
            mask = ~((self.df[col] < (Q1 - 1.5 * IQR)) | (self.df[col] > (Q3 + 1.5 * IQR)))
            self.df = self.df[mask]

        if self.df.empty:
            logger.warning(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {original_shape}")
            return f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫! –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_shape} üî•"
        logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: {self.df.shape}")
        return f"–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã! –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {self.df.shape} üíé"

    def visualize_data(self, numeric_column: Optional[str] = None, categorical_column: Optional[str] = None, theme: str = 'dark') -> Tuple[str, List[Path]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π."""
        if self.df is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! üî•", []

        numeric_cols = self.df.select_dtypes(include=[np.number]).columns
        categorical_cols = self.df.select_dtypes(include=['object', 'category']).columns

        if numeric_column and numeric_column not in self.df.columns:
            logger.warning(f"–°—Ç–æ–ª–±–µ—Ü {numeric_column} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∏—Å–ª–æ–≤–æ–π")
            numeric_column = numeric_cols[0] if len(numeric_cols) > 0 else None
        if categorical_column and categorical_column not in self.df.columns:
            logger.warning(f"–°—Ç–æ–ª–±–µ—Ü {categorical_column} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π")
            categorical_column = categorical_cols[0] if len(categorical_cols) > 0 else None

        sns.set_style("whitegrid")
        sns.set_context("notebook", font_scale=1.2)
        sns.set_palette("Greys")
        bg_color = '#FFFFFF' if theme == 'light' else '#212121'
        text_color = '#424242' if theme == 'light' else '#E0E0E0'
        plot_color = '#B0BEC5'

        image_paths: List[Path] = []

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        if numeric_column:
            try:
                fig = plt.figure(figsize=(10, 6), facecolor=bg_color)
                ax = fig.add_subplot(111)
                sns.histplot(self.df[numeric_column].dropna(), bins=30, color=plot_color, edgecolor='#424242')
                ax.set_title(f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ {numeric_column} üìä', color=text_color, fontsize=16)
                ax.set_xlabel(numeric_column, color=text_color, fontsize=12)
                ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞', color=text_color, fontsize=12)
                ax.set_facecolor(bg_color)
                fig.patch.set_facecolor(bg_color)
                hist_path = self.output_dir / f'hist_{numeric_column}.png'
                plt.savefig(hist_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                plt.close()
                if hist_path.exists():
                    image_paths.append(hist_path)
                    logger.info(f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {hist_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã: {str(e)}")
                return f"–û—à–∏–±–∫–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã: {str(e)} üî•", []

        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        if categorical_column:
            try:
                plt.figure(figsize=(10, 6), facecolor=bg_color)
                ax = plt.gca()
                ax.set_facecolor(bg_color)
                counts = self.df[categorical_column].value_counts()
                sns.barplot(x=counts.index, y=counts.values, color=plot_color, edgecolor='#424242')
                plt.title(f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {categorical_column} üíé', color=text_color, fontsize=16)
                plt.xlabel(categorical_column, color=text_color, fontsize=12)
                plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', color=text_color, fontsize=12)
                plt.xticks(rotation=45, color=text_color)
                plt.yticks(color=text_color)
                bar_path = self.output_dir / f'bar_{categorical_column}.png'
                plt.savefig(bar_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                plt.close()
                if bar_path.exists():
                    image_paths.append(bar_path)
                    logger.info(f"–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {bar_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}")
                return f"–û—à–∏–±–∫–∞ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)} üî•", []

        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        if len(numeric_cols) > 1:
            try:
                fig = plt.figure(figsize=(10, 8), facecolor=bg_color)
                ax = plt.gca()
                ax.set_facecolor(bg_color)
                sns.heatmap(
                    self.df[numeric_cols].corr(), annot=True, cmap='Greys',
                    annot_kws={'color': text_color, 'fontsize': 10},
                    cbar_kws={'label': '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è', 'ticks': [-1, 0, 1]},
                    linewidths=0.5, linecolor='#424242'
                )
                plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è üìà', color=text_color, fontsize=16)
                plt.tick_params(colors=text_color)
                corr_path = self.output_dir / 'correlation_matrix.png'
                plt.savefig(corr_path, bbox_inches='tight', facecolor=bg_color, dpi=300)
                plt.close()
                if corr_path.exists():
                    image_paths.append(corr_path)
                    logger.info(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {corr_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: {str(e)}")
                return f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)} üî•", []

        logger.info(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
        return f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir} üöÄ", image_paths

class DataAnalyzerApp:
    def __init__(self, root: ctk.CTk):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞—á–∞–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º."""
        self.root = root
        self.root.title("üíé –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –î–∞–Ω–Ω—ã—Ö üíé")
        self.root.geometry("1200x800")
        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
        script_dir = Path(__file__).parent
        self.analyzer = DataAnalyzer(str(script_dir / "sample_data.csv"))
        self.current_theme = "light"
        self.numeric_column: Optional[str] = None
        self.categorical_column: Optional[str] = None
        self.image_labels: List[ctk.CTkLabel] = []

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω
        self.root.configure(fg_color="#FFFFFF")

        # –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
        self.welcome_label = ctk.CTkLabel(
            self.root,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª",
            font=("Helvetica", 24, "bold"),
            text_color="#424242"
        )
        self.welcome_label.place(relx=0.5, rely=0.4, anchor=ctk.CENTER)

        button_style = {
            "width": 200,
            "height": 50,
            "font": ("Helvetica", 16, "bold"),
            "fg_color": "#B0BEC5",
            "hover_color": "#CFD8DC",
            "corner_radius": 10,
            "text_color": "#424242"
        }

        self.load_button = ctk.CTkButton(
            self.root,
            text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å",
            command=self.load_data,
            **button_style
        )
        self.load_button.place(relx=0.5, rely=0.5, anchor=ctk.CENTER)
        self.animate_button(self.load_button)

        # –°–æ–∑–¥–∞—ë–º —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.navbar = ctk.CTkFrame(self.root, height=90, fg_color="#333", corner_radius=0)
        # –ù–µ —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ–∫–∞

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        self.datetime_label = ctk.CTkLabel(
            self.navbar,
            text="",
            font=("Helvetica", 14),
            text_color="#E0E0E0"
        )
        self.datetime_label.pack(side=ctk.TOP, pady=5)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.button_frame_1 = ctk.CTkFrame(self.navbar, fg_color="#333")
        self.button_frame_1.pack(side=ctk.TOP, fill=ctk.X, pady=5)

        # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π (–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏)
        self.action_menu = ctk.CTkOptionMenu(
            self.button_frame_1,
            values=["–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", "üìä –ê–Ω–∞–ª–∏–∑", "üßπ –û—á–∏—Å—Ç–∏—Ç—å", "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "üìÑ –≠–∫—Å–ø–æ—Ä—Ç", "üåô –¢–µ–º–∞"],
            command=self.execute_action,
            width=200,
            fg_color="#B0BEC5",
            button_color="#CFD8DC",
            button_hover_color="#E0E0E0",
            text_color="#424242",
            font=("Helvetica", 12, "bold")
        )

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (—Å–∫—Ä—ã—Ç–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ)
        self.text_area = ctk.CTkTextbox(
            self.root,
            height=200,
            font=("Helvetica", 14),
            wrap="word",
            fg_color="#F5F5F5",
            text_color="#424242",
            corner_radius=10
        )

        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Å–∫—Ä—ã—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–µ)
        self.button_frame_2 = ctk.CTkFrame(self.root, fg_color="#FFFFFF" if self.current_theme == "light" else "#212121")

        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.numeric_label = ctk.CTkLabel(
            self.button_frame_2, text="üî¢ –ß–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü:", font=("Helvetica", 12, "bold"), text_color="#424242"
        )
        self.numeric_label.pack(side=ctk.LEFT, padx=10)

        self.numeric_menu = ctk.CTkOptionMenu(
            self.button_frame_2,
            values=["–í—ã–±–µ—Ä–∏—Ç–µ..."],
            command=self.set_numeric_column,
            width=120,
            fg_color="#B0BEC5",
            button_color="#CFD8DC",
            button_hover_color="#E0E0E0",
            text_color="#424242",
            font=("Helvetica", 12)
        )
        self.numeric_menu.pack(side=ctk.LEFT, padx=5)

        self.categorical_label = ctk.CTkLabel(
            self.button_frame_2, text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü:", font=("Helvetica", 12, "bold"), text_color="#424242"
        )
        self.categorical_label.pack(side=ctk.LEFT, padx=10)

        self.categorical_menu = ctk.CTkOptionMenu(
            self.button_frame_2,
            values=["–í—ã–±–µ—Ä–∏—Ç–µ..."],
            command=self.set_categorical_column,
            width=120,
            fg_color="#B0BEC5",
            button_color="#CFD8DC",
            button_hover_color="#E0E0E0",
            text_color="#424242",
            font=("Helvetica", 12)
        )
        self.categorical_menu.pack(side=ctk.LEFT, padx=5)

        # –ü–∞–Ω–µ–ª—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (—Å–∫—Ä—ã—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ)
        self.image_frame = ctk.CTkScrollableFrame(
            self.root, fg_color="transparent", corner_radius=10
        )

        logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ üî•")

    def update_datetime(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ."""
        msk = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(msk)
        formatted_time = current_time.strftime("%I:%M %p MSK on %A, %B %d, %Y")
        self.datetime_label.configure(text=f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_time}")
        self.root.after(1000, self.update_datetime)

    def animate_button(self, button: ctk.CTkButton) -> None:
        """–ü—É–ª—å—Å–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫."""
        def pulse():
            current_color = button.cget("fg_color")
            new_color = "#CFD8DC" if current_color == "#B0BEC5" else "#B0BEC5"
            button.configure(fg_color=new_color)
            self.root.after(800, pulse)
        pulse()

    def toggle_theme(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º."""
        if self.current_theme == "light":
            self.current_theme = "dark"
            ctk.set_appearance_mode("dark")
            self.root.configure(fg_color="#212121")
            self.text_area.configure(fg_color="#424242", text_color="#000000")
            self.navbar.configure(fg_color="#333")
            self.button_frame_1.configure(fg_color="#333")
            self.button_frame_2.configure(fg_color="#212121")
            self.action_menu.configure(fg_color="#B0BEC5", button_color="#CFD8DC", button_hover_color="#E0E0E0", text_color="#000000")
            self.numeric_label.configure(text_color="#000000")
            self.categorical_label.configure(text_color="#000000")
            self.numeric_menu.configure(fg_color="#B0BEC5", button_color="#CFD8DC", button_hover_color="#E0E0E0", text_color="#000000")
            self.categorical_menu.configure(fg_color="#B0BEC5", button_color="#CFD8DC", button_hover_color="#E0E0E0", text_color="#000000")
            self.datetime_label.configure(text_color="#000000")
            self.welcome_label.configure(text_color="#000000")
        else:
            self.current_theme = "light"
            ctk.set_appearance_mode("light")
            self.root.configure(fg_color="#FFFFFF")
            self.text_area.configure(fg_color="#F5F5F5", text_color="#424242")
            self.navbar.configure(fg_color="#333")
            self.button_frame_1.configure(fg_color="#333")
            self.button_frame_2.configure(fg_color="#FFFFFF")
            self.action_menu.configure(fg_color="#B0BEC5", button_color="#CFD8DC", button_hover_color="#E0E0E0", text_color="#424242")
            self.numeric_label.configure(text_color="#424242")
            self.categorical_label.configure(text_color="#424242")
            self.numeric_menu.configure(fg_color="#B0BEC5", button_color="#CFD8DC", button_hover_color="#E0E0E0", text_color="#424242")
            self.categorical_menu.configure(fg_color="#B0BEC5", button_color="#CFD8DC", button_hover_color="#E0E0E0", text_color="#424242")
            self.datetime_label.configure(text_color="#E0E0E0")
            self.welcome_label.configure(text_color="#424242")
        logger.info(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.current_theme}")

    def log_message(self, message: str) -> None:
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        self.text_area.delete(1.0, ctk.END)
        self.text_area.insert(ctk.END, message + "\n\n")
        self.text_area.see(ctk.END)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:50]}...")

    def clear_images(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π."""
        for label in self.image_labels:
            label.destroy()
        self.image_labels = []
        logger.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")

    def set_numeric_column(self, column: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        self.numeric_column = column if column != "–í—ã–±–µ—Ä–∏—Ç–µ..." else None
        logger.info(f"–ß–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü: {self.numeric_column}")

    def set_categorical_column(self, column: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        self.categorical_column = column if column != "–í—ã–±–µ—Ä–∏—Ç–µ..." else None
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü: {self.categorical_column}")

    def load_data(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∞–π–ª–∞."""
        file_path = filedialog.askopenfilename(filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv")])
        if file_path:
            self.analyzer.file_path = Path(file_path)
            def run_async():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.analyzer.load_data_async())
                loop.close()
                self.root.after(0, lambda: self._post_load_data(result))
            
            self.welcome_label.configure(text="–ó–∞–≥—Ä—É–∑–∫–∞... üöÄ")
            self.root.update()
            threading.Thread(target=run_async, daemon=True).start()
        else:
            self.welcome_label.configure(text="–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! üî•")

    def execute_action(self, action: str) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –º–µ–Ω—é."""
        if action == "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ":
            return
        elif action == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å":
            self.load_data()
        elif action == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä":
            self.preview_data()
        elif action == "üìä –ê–Ω–∞–ª–∏–∑":
            self.basic_analysis()
        elif action == "üßπ –û—á–∏—Å—Ç–∏—Ç—å":
            self.clean_data()
        elif action == "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
            self.visualize_data()
        elif action == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç":
            self.export_to_pdf()
        elif action == "üåô –¢–µ–º–∞":
            self.toggle_theme()
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é
        self.action_menu.set("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    def _post_load_data(self, result: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        self.welcome_label.destroy()
        self.load_button.place_forget()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.navbar.pack(side=ctk.TOP, fill=ctk.X)
        self.update_datetime()  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.text_area.place(relx=0.01, rely=0.12, relwidth=0.98, relheight=0.35)
        self.button_frame_2.place(relx=0.01, rely=0.48, relwidth=0.98, relheight=0.05)
        self.image_frame.place(relx=0.01, rely=0.54, relwidth=0.98, relheight=0.45)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
        self.action_menu.pack(side=ctk.LEFT, padx=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å—Ç–æ–ª–±—Ü–æ–≤
        if self.analyzer.df is not None:
            numeric_cols = list(self.analyzer.df.select_dtypes(include=[np.number]).columns)
            categorical_cols = list(self.analyzer.df.select_dtypes(include=['object', 'category']).columns)
            self.numeric_menu.configure(values=["–í—ã–±–µ—Ä–∏—Ç–µ..."] + numeric_cols)
            self.categorical_menu.configure(values=["–í—ã–±–µ—Ä–∏—Ç–µ..."] + categorical_cols)
            logger.info("–ú–µ–Ω—é —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")

        self.log_message(result)
        self.clear_images()

    def preview_data(self) -> None:
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö."""
        if self.analyzer.df is None:
            self.log_message("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! üî•")
            return
        self.log_message("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:\n" + str(self.analyzer.df.head()))
        self.clear_images()

    def basic_analysis(self) -> None:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö."""
        self.log_message("–ê–Ω–∞–ª–∏–∑... üìä")
        self.root.update()
        result = self.analyzer.basic_analysis()
        self.log_message(result)
        self.clear_images()

    def clean_data(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        self.log_message("–û—á–∏—Å—Ç–∫–∞... üßπ")
        self.root.update()
        result = self.analyzer.clean_data()
        self.log_message(result)
        self.clear_images()

    def visualize_data(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π."""
        self.log_message("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤... üìà")
        self.root.update()
        self.clear_images()
        result, image_paths = self.analyzer.visualize_data(
            numeric_column=self.numeric_column,
            categorical_column=self.categorical_column,
            theme=self.current_theme
        )
        self.log_message(result)

        if not image_paths:
            self.log_message("–ì—Ä–∞—Ñ–∏–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. üî•")
            return

        for path in image_paths:
            try:
                if not path.exists():
                    self.log_message(f"–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
                    continue
                img = Image.open(path)
                img = img.resize((350, 250), Image.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                label = ctk.CTkLabel(
                    self.image_frame,
                    image=photo,
                    text="",
                    fg_color="#F5F5F5" if self.current_theme == "light" else "#424242",
                    corner_radius=10
                )
                label.image = photo
                label.pack(side=ctk.LEFT, padx=15, pady=15)
                self.image_labels.append(label)
                logger.info(f"–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω: {path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ {path}: {str(e)}")
                self.log_message(f"–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ {path}: {str(e)}")
        
        self.log_message(f"–ì—Ä–∞—Ñ–∏–∫–∏ –≥–æ—Ç–æ–≤—ã! {len(self.image_labels)} —à—Ç. üî•")

    def export_to_pdf(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤ PDF."""
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfgen import canvas as pdf_canvas

        self.log_message("–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF... üìÑ")
        self.root.update()

        result, image_paths = self.analyzer.visualize_data(
            numeric_column=self.numeric_column,
            categorical_column=self.categorical_column,
            theme=self.current_theme
        )
        
        if not image_paths:
            self.log_message("–ù–µ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞! üî•")
            return

        pdf_path = self.analyzer.output_dir / 'minimal_visualizations.pdf'
        c = pdf_canvas.Canvas(str(pdf_path), pagesize=A4)
        width, height = A4

        for i, img_path in enumerate(image_paths):
            if img_path.exists():
                img = Image.open(img_path)
                img_width, img_height = img.size
                aspect = img_height / float(img_width)
                target_width = width - 120
                target_height = target_width * aspect
                if target_height > height - 120:
                    target_height = height - 120
                    target_width = target_height / aspect
                c.drawImage(
                    str(img_path),
                    (width - target_width) / 2,
                    height - target_height - 60,
                    width=target_width,
                    height=target_height
                )
                c.showPage()
        
        c.save()
        self.log_message(f"PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {pdf_path} üìÑ")
        logger.info(f"PDF —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {pdf_path}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        root = ctk.CTk()
        app = DataAnalyzerApp(root)
        root.mainloop()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise

if __name__ == "__main__":
    main()